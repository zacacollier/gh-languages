'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Child component of Grid that displays inline when
 * there is enough space in the container
 */

var Cell = function (_React$Component) {
  _inherits(Cell, _React$Component);

  function Cell() {
    _classCallCheck(this, Cell);

    return _possibleConstructorReturn(this, Object.getPrototypeOf(Cell).apply(this, arguments));
  }

  _createClass(Cell, [{
    key: 'render',
    value: function render() {
      var _props = this.props;
      var inline = _props.inline;
      var width = _props.width;
      var padding = _props.padding;
      var children = _props.children;

      var style = {
        boxSizing: 'border-box',
        display: inline ? 'inline-block' : 'block',
        width: inline ? width * 100 + '%' : '100%',
        verticalAlign: 'top',
        paddingLeft: padding,
        paddingRight: padding,
        position: 'relative'
      };

      return _react2.default.createElement(
        'div',
        { ref: 'cell', style: style },
        children
      );
    }
  }]);

  return Cell;
}(_react2.default.Component);

Cell.propTypes = {
  /** Min-width to display inline */
  min: _react2.default.PropTypes.number,
  /** Max-width for Cell */
  max: _react2.default.PropTypes.number,
  /** Width of cell when inline is true - value should be 0â€“1 */
  width: _react2.default.PropTypes.number,
  /** Left and right padding for creating gutters */
  padding: _react2.default.PropTypes.number,
  /** Sets display inline-block and activates width prop */
  inline: _react2.default.PropTypes.bool
};

Cell.defaultProps = {
  min: 640,
  max: null,
  width: 100,
  padding: 0,
  inline: false
};

exports.default = Cell;